{"ast":null,"code":"import { ref, computed } from 'vue';\nexport default {\n  setup() {\n    const userChoice = ref('');\n    const computerChoice = ref('');\n    const resultMessage = ref('');\n    const gameOver = ref(false);\n    const result_Gain = ref(false);\n    const result_Draw = ref(false);\n\n    // Opciones disponibles\n    const choices = ['piedra', 'papel', 'tijera'];\n\n    // Lógica para jugar\n    const play = choice => {\n      userChoice.value = choice;\n      computerChoice.value = choices[Math.floor(Math.random() * choices.length)];\n      determineWinner();\n      gameOver.value = true;\n    };\n\n    // Función para determinar el ganador\n    const determineWinner = () => {\n      if (userChoice.value === computerChoice.value) {\n        resultMessage.value = '¡Empate!';\n        result_Draw.value = true;\n        result_Gain.value = false;\n      } else if (userChoice.value === 'piedra' && computerChoice.value === 'tijera' || userChoice.value === 'papel' && computerChoice.value === 'piedra' || userChoice.value === 'tijera' && computerChoice.value === 'papel') {\n        resultMessage.value = '¡Ganaste!';\n        result_Gain.value = true;\n        result_Draw.value = false;\n      } else {\n        resultMessage.value = '¡Perdiste!';\n        result_Gain.value = false;\n        result_Draw.value = false;\n      }\n    };\n\n    // Función para reiniciar el juego\n    const restartGame = () => {\n      userChoice.value = '';\n      computerChoice.value = '';\n      resultMessage.value = '';\n      gameOver.value = false;\n    };\n\n    // Determina la clase que se aplicará en función del resultado\n    const resultClass = computed(() => {\n      if (result_Gain.value) {\n        return 'resultGain';\n      } else if (result_Draw.value) {\n        return 'resultDraw';\n      } else {\n        return 'resultLost';\n      }\n    });\n    return {\n      result_Gain,\n      result_Draw,\n      userChoice,\n      computerChoice,\n      resultMessage,\n      gameOver,\n      play,\n      restartGame,\n      resultClass\n    };\n  }\n};","map":{"version":3,"names":["ref","computed","setup","userChoice","computerChoice","resultMessage","gameOver","result_Gain","result_Draw","choices","play","choice","value","Math","floor","random","length","determineWinner","restartGame","resultClass"],"sources":["C:\\Users\\Edgar\\Documents\\GitHub\\spsgame\\spsgame\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Piedra, Papel o ¡Revancha!</h1>\n    <div class=\"score-column\">\n      \n\n    </div>\n    <div v-if=\"!gameOver\">\n      <h3>Elige una opción:</h3>\n      <div class=\"choices\">\n        <button @click=\"play('piedra')\">Piedra</button>\n        <button @click=\"play('papel')\">Papel</button>\n        <button @click=\"play('tijera')\">Tijera</button>\n      </div>\n    </div>\n    \n    <div v-if=\"gameOver\">\n      <h3>Tu elección: {{ userChoice }} | Opción de la computadora: {{ computerChoice }}</h3>\n      <div :class=\"resultClass\">\n        <h3>{{ resultMessage }}</h3>\n      </div>\n      <button @click=\"restartGame\">Jugar de nuevo</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, computed } from 'vue';\n\nexport default {\n  setup() {\n    const userChoice = ref('');\n    const computerChoice = ref('');\n    const resultMessage = ref('');\n    const gameOver = ref(false);\n    const result_Gain = ref(false); \n    const result_Draw = ref(false); \n\n    // Opciones disponibles\n    const choices = ['piedra', 'papel', 'tijera'];\n\n    // Lógica para jugar\n    const play = (choice) => {\n      userChoice.value = choice;\n      computerChoice.value = choices[Math.floor(Math.random() * choices.length)];\n      determineWinner();\n      gameOver.value = true;\n    };\n\n    // Función para determinar el ganador\n    const determineWinner = () => {\n      if (userChoice.value === computerChoice.value) {\n        resultMessage.value = '¡Empate!';\n        result_Draw.value = true;\n        result_Gain.value = false;\n      } else if (\n        (userChoice.value === 'piedra' && computerChoice.value === 'tijera') ||\n        (userChoice.value === 'papel' && computerChoice.value === 'piedra') ||\n        (userChoice.value === 'tijera' && computerChoice.value === 'papel')\n      ) {\n        resultMessage.value = '¡Ganaste!';\n        result_Gain.value = true;\n        result_Draw.value = false;\n      } else {\n        resultMessage.value = '¡Perdiste!';\n        result_Gain.value = false;\n        result_Draw.value = false;\n      }\n    };\n\n    // Función para reiniciar el juego\n    const restartGame = () => {\n      userChoice.value = '';\n      computerChoice.value = '';\n      resultMessage.value = '';\n      gameOver.value = false;\n    };\n\n    // Determina la clase que se aplicará en función del resultado\n    const resultClass = computed(() => {\n      if (result_Gain.value) {\n        return 'resultGain';\n      } else if (result_Draw.value) {\n        return 'resultDraw';\n      } else {\n        return 'resultLost';\n      }\n    });\n\n    return {\n      result_Gain,\n      result_Draw,\n      userChoice,\n      computerChoice,\n      resultMessage,\n      gameOver,\n      play,\n      restartGame,\n      resultClass\n    };\n  }\n};\n</script>\n\n<style>\nbody {\n  background-color: gray;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  text-align: center;\n  margin: 60px;\n  padding: 50px;\n  background-color: white;\n  box-shadow: 2px 2px 2px 1px rgba(0, 0.1, 0.2, 0.3);\n  border-radius: 40px;\n}\n\n.choices button {\n  padding: 20px 30px;\n  font-size: 18px;\n  margin: 10px;\n  cursor: pointer;\n  background-color: #42b983;\n  border: none;\n  color: white;\n  border-radius: 15px;\n}\n\n.choices button:hover {\n  background-color: #369b73;\n}\n\nbutton {\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n  background-color: #42b983;\n  border: none;\n  color: white;\n  border-radius: 5px;\n}\n\nbutton:hover {\n  background-color: #369b73;\n}\n\nh3 {\n  font-size: 20px;\n  margin-top: 20px;\n}\n\n.resultGain {\n  background-color: green;\n  color: white;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 10px;\n}\n\n.resultLost {\n  background-color: red;\n  color: white;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 10px;\n}\n\n.resultDraw {\n  background-color: yellow;\n  color: black;\n  margin: 10px;\n  padding: 10px;\n  border-radius: 10px;\n}\n</style>\n"],"mappings":"AA2BA,SAASA,GAAG,EAAEC,QAAO,QAAS,KAAK;AAEnC,eAAe;EACbC,KAAKA,CAAA,EAAG;IACN,MAAMC,UAAS,GAAIH,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMI,cAAa,GAAIJ,GAAG,CAAC,EAAE,CAAC;IAC9B,MAAMK,aAAY,GAAIL,GAAG,CAAC,EAAE,CAAC;IAC7B,MAAMM,QAAO,GAAIN,GAAG,CAAC,KAAK,CAAC;IAC3B,MAAMO,WAAU,GAAIP,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAMQ,WAAU,GAAIR,GAAG,CAAC,KAAK,CAAC;;IAE9B;IACA,MAAMS,OAAM,GAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,CAAC;;IAE7C;IACA,MAAMC,IAAG,GAAKC,MAAM,IAAK;MACvBR,UAAU,CAACS,KAAI,GAAID,MAAM;MACzBP,cAAc,CAACQ,KAAI,GAAIH,OAAO,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,IAAIN,OAAO,CAACO,MAAM,CAAC,CAAC;MAC1EC,eAAe,CAAC,CAAC;MACjBX,QAAQ,CAACM,KAAI,GAAI,IAAI;IACvB,CAAC;;IAED;IACA,MAAMK,eAAc,GAAIA,CAAA,KAAM;MAC5B,IAAId,UAAU,CAACS,KAAI,KAAMR,cAAc,CAACQ,KAAK,EAAE;QAC7CP,aAAa,CAACO,KAAI,GAAI,UAAU;QAChCJ,WAAW,CAACI,KAAI,GAAI,IAAI;QACxBL,WAAW,CAACK,KAAI,GAAI,KAAK;MAC3B,OAAO,IACJT,UAAU,CAACS,KAAI,KAAM,QAAO,IAAKR,cAAc,CAACQ,KAAI,KAAM,QAAQ,IAClET,UAAU,CAACS,KAAI,KAAM,OAAM,IAAKR,cAAc,CAACQ,KAAI,KAAM,QAAQ,IACjET,UAAU,CAACS,KAAI,KAAM,QAAO,IAAKR,cAAc,CAACQ,KAAI,KAAM,OAAO,EAClE;QACAP,aAAa,CAACO,KAAI,GAAI,WAAW;QACjCL,WAAW,CAACK,KAAI,GAAI,IAAI;QACxBJ,WAAW,CAACI,KAAI,GAAI,KAAK;MAC3B,OAAO;QACLP,aAAa,CAACO,KAAI,GAAI,YAAY;QAClCL,WAAW,CAACK,KAAI,GAAI,KAAK;QACzBJ,WAAW,CAACI,KAAI,GAAI,KAAK;MAC3B;IACF,CAAC;;IAED;IACA,MAAMM,WAAU,GAAIA,CAAA,KAAM;MACxBf,UAAU,CAACS,KAAI,GAAI,EAAE;MACrBR,cAAc,CAACQ,KAAI,GAAI,EAAE;MACzBP,aAAa,CAACO,KAAI,GAAI,EAAE;MACxBN,QAAQ,CAACM,KAAI,GAAI,KAAK;IACxB,CAAC;;IAED;IACA,MAAMO,WAAU,GAAIlB,QAAQ,CAAC,MAAM;MACjC,IAAIM,WAAW,CAACK,KAAK,EAAE;QACrB,OAAO,YAAY;MACrB,OAAO,IAAIJ,WAAW,CAACI,KAAK,EAAE;QAC5B,OAAO,YAAY;MACrB,OAAO;QACL,OAAO,YAAY;MACrB;IACF,CAAC,CAAC;IAEF,OAAO;MACLL,WAAW;MACXC,WAAW;MACXL,UAAU;MACVC,cAAc;MACdC,aAAa;MACbC,QAAQ;MACRI,IAAI;MACJQ,WAAW;MACXC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}