{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  class: \"choices\"\n};\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  key: 0\n};\nconst _hoisted_6 = {\n  class: \"resultGain\"\n};\nconst _hoisted_7 = {\n  key: 1\n};\nconst _hoisted_8 = {\n  class: \"resultDraw\"\n};\nconst _hoisted_9 = {\n  key: 2\n};\nconst _hoisted_10 = {\n  class: \"resultLost\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"h1\", null, \"Piedra, Papel o ¡Revancha!\", -1 /* HOISTED */)), !$setup.gameOver ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[4] || (_cache[4] = _createElementVNode(\"h3\", null, \"Elige una opción:\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = $event => $setup.play('piedra'))\n  }, \"Piedra\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = $event => $setup.play('papel'))\n  }, \"Papel\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = $event => $setup.play('tijera'))\n  }, \"Tijera\")])])) : _createCommentVNode(\"v-if\", true), $setup.gameOver ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"h3\", null, \"Tu elección: \" + _toDisplayString($setup.userChoice) + \" | Opción de la computadora: \" + _toDisplayString($setup.computerChoice), 1 /* TEXT */), _ctx.result_Gain ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"h3\", _hoisted_6, _toDisplayString($setup.resultMessage), 1 /* TEXT */)])) : _ctx.result_Draw ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"h3\", _hoisted_8, _toDisplayString($setup.resultMessage), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"h3\", _hoisted_10, _toDisplayString($setup.resultMessage), 1 /* TEXT */)])), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $setup.restartGame && $setup.restartGame(...args))\n  }, \"Jugar de nuevo\")])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["id","key","class","_createElementBlock","_hoisted_1","_createElementVNode","$setup","gameOver","_hoisted_2","_hoisted_3","onClick","_cache","$event","play","_createCommentVNode","_hoisted_4","_toDisplayString","userChoice","computerChoice","_ctx","result_Gain","_hoisted_5","_hoisted_6","resultMessage","result_Draw","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","args","restartGame"],"sources":["C:\\Users\\Edgar\\Documents\\GitHub\\spsgame\\spsgame\\src\\App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>Piedra, Papel o ¡Revancha!</h1>\n    <div v-if=\"!gameOver\">\n      <h3>Elige una opción:</h3>\n      <div class=\"choices\">\n        <button @click=\"play('piedra')\">Piedra</button>\n        <button @click=\"play('papel')\">Papel</button>\n        <button @click=\"play('tijera')\">Tijera</button>\n      </div>\n    </div>\n    \n    <div v-if=\"gameOver\">\n      <h3>Tu elección: {{ userChoice }} | Opción de la computadora: {{ computerChoice }}</h3>\n      <div v-if=\"result_Gain\">\n        <h3 class=\"resultGain\">{{ resultMessage }}</h3>\n      </div>\n      <div v-else-if=\"result_Draw\">\n        <h3 class=\"resultDraw\">{{ resultMessage }}</h3>\n      </div>\n      <div v-else>\n        <h3 class=\"resultLost\">{{ resultMessage }}</h3>\n      </div>\n      <button @click=\"restartGame\">Jugar de nuevo</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\n\nexport default {\n  setup() {\n    const userChoice = ref('');\n    const computerChoice = ref('');\n    const resultMessage = ref('');\n    const gameOver = ref(false);\n    const win = ref(''); \n    const resultDraw = ref(''); \n\n    // Opciones disponibles\n    const choices = ['piedra', 'papel', 'tijera'];\n\n    // Lógica para jugar\n    const play = (choice) => {\n      userChoice.value = choice;\n      computerChoice.value = choices[Math.floor(Math.random() * choices.length)];\n      determineWinner();\n      gameOver.value = true;\n    };\n\n    // Función para determinar el ganador\n    const determineWinner = () => {\n      if (userChoice.value === computerChoice.value) {\n        resultMessage.value = '¡Empate!';\n        resultDraw.value = resultMessage.value;\n      } else if (\n        (userChoice.value === 'piedra' && computerChoice.value === 'tijera') ||\n        (userChoice.value === 'papel' && computerChoice.value === 'piedra') ||\n        (userChoice.value === 'tijera' && computerChoice.value === 'papel')\n      ) {\n        resultMessage.value = '¡Ganaste!';\n        win.value = resultMessage.value;\n      } else {\n        resultMessage.value = '¡Perdiste!';\n      }\n    };\n\n    // Función para reiniciar el juego\n    const restartGame = () => {\n      userChoice.value = '';\n      computerChoice.value = '';\n      resultMessage.value = '';\n      gameOver.value = false;\n    };\n\n    return {\n      win,\n      resultDraw,\n      userChoice,\n      computerChoice,\n      resultMessage,\n      gameOver,\n      play,\n      restartGame\n    };\n  }\n};\n</script>\n\n<style>\nbody {\n  background-color: gray;\n}\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  text-align: center;\n  /*margin-top: 50px;*/\n  margin: 60px;\n  padding: 50px;\n  background-color: white;\n  box-shadow: 2px 2px 2px 1px rgba(0, 0.1, 0.2, 0.3);;\n  border-radius: 40px;\n}\n\n.choices button {\n  padding: 20px 30px;\n  font-size: 18px;\n  margin: 10px;\n  cursor: pointer;\n  background-color: #42b983;\n  border: none;\n  color: white;\n  border-radius: 15px;\n}\n\n.choices button:hover {\n  background-color: #369b73;\n}\n\nbutton {\n  padding: 10px 20px;\n  font-size: 18px;\n  cursor: pointer;\n  background-color: #42b983;\n  border: none;\n  color: white;\n  border-radius: 5px;\n}\n\nbutton:hover {\n  background-color: #369b73;\n}\n\nh3 {\n  font-size: 20px;\n  margin-top: 20px;\n}\n.resultGain {\n  background-color: green;\n  margin: 10px;\n  padding: 10px;\n}\n.resultLost {\n  background-color: red;\n}\n.resultDraw {\n  background-color: yellow;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EADfC,GAAA;AAAA;;EAKWC,KAAK,EAAC;AAAS;;EAL1BD,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAeYC,KAAK,EAAC;AAAY;;EAf9BD,GAAA;AAAA;;EAkBYC,KAAK,EAAC;AAAY;;EAlB9BD,GAAA;AAAA;;EAqBYC,KAAK,EAAC;AAAY;;uBApB5BC,mBAAA,CAwBM,OAxBNC,UAwBM,G,0BAvBJC,mBAAA,CAAmC,YAA/B,4BAA0B,sB,CAClBC,MAAA,CAAAC,QAAQ,I,cAApBJ,mBAAA,CAOM,OAVVK,UAAA,G,0BAIMH,mBAAA,CAA0B,YAAtB,mBAAiB,sBACrBA,mBAAA,CAIM,OAJNI,UAIM,GAHJJ,mBAAA,CAA+C;IAAtCK,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEN,MAAA,CAAAO,IAAI;KAAY,QAAM,GACtCR,mBAAA,CAA6C;IAApCK,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEN,MAAA,CAAAO,IAAI;KAAW,OAAK,GACpCR,mBAAA,CAA+C;IAAtCK,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEN,MAAA,CAAAO,IAAI;KAAY,QAAM,E,OAR9CC,mBAAA,gBAYeR,MAAA,CAAAC,QAAQ,I,cAAnBJ,mBAAA,CAYM,OAxBVY,UAAA,GAaMV,mBAAA,CAAuF,YAAnF,eAAa,GAAAW,gBAAA,CAAGV,MAAA,CAAAW,UAAU,IAAG,+BAA6B,GAAAD,gBAAA,CAAGV,MAAA,CAAAY,cAAc,kBACpEC,IAAA,CAAAC,WAAW,I,cAAtBjB,mBAAA,CAEM,OAhBZkB,UAAA,GAeQhB,mBAAA,CAA+C,MAA/CiB,UAA+C,EAAAN,gBAAA,CAArBV,MAAA,CAAAiB,aAAa,iB,KAEzBJ,IAAA,CAAAK,WAAW,I,cAA3BrB,mBAAA,CAEM,OAnBZsB,UAAA,GAkBQpB,mBAAA,CAA+C,MAA/CqB,UAA+C,EAAAV,gBAAA,CAArBV,MAAA,CAAAiB,aAAa,iB,oBAEzCpB,mBAAA,CAEM,OAtBZwB,UAAA,GAqBQtB,mBAAA,CAA+C,MAA/CuB,WAA+C,EAAAZ,gBAAA,CAArBV,MAAA,CAAAiB,aAAa,iB,IAEzClB,mBAAA,CAAoD;IAA3CK,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAkB,IAAA,KAAEvB,MAAA,CAAAwB,WAAA,IAAAxB,MAAA,CAAAwB,WAAA,IAAAD,IAAA,CAAW;KAAE,gBAAc,E,KAvBjDf,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}